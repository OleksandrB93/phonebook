{"version":3,"file":"static/js/791.cdd0859b.chunk.js","mappings":"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","sources":["redux/contacts/selectors.js","components/Phonebook/Phonebook.styled.jsx","components/Phonebook/Phonebook.jsx","components/SearchInput/SearchInput.styled.jsx","components/SearchInput/SearchInput.jsx","components/ContactList/ContactLIst.styled.jsx","components/ContactList/ContactList.jsx","components/Skeleton/SkeletonItem.jsx","components/pages/Contacts/ContactsPage.jsx"],"sourcesContent":["import { createSelector } from \"@reduxjs/toolkit\";\n\nexport const selectContacts = (state) => state.contacts.items;\nexport const selectIsLoading = (state) => state.contacts.isLoading;\nexport const selectError = (state) => state.contacts.error;\nexport const selectFilter = (state) => state.filter;\n\nexport const selectFilteredContacts = createSelector(\n  [selectContacts, selectFilter],\n  (contacts, filter) => {\n    return contacts.filter(({name}) =>\n      name.toLowerCase().includes(filter.toLowerCase())\n    );\n  }\n);","import styled from \"@emotion/styled\";\n\nexport const Form = styled.form`\n  padding: 0;\n`;\n\nexport const NameLabel = styled.label`\n  color: #e9e9e9;\n  margin-right: 15px;\n`;\n\nexport const Input = styled.input`\n  width: 100px;\n  margin-left: 3px;\n  background-color: transparent;\n  border: none;\n  border-bottom: 1px solid #360032;\n  transition: border-bottom 300ms ease-in;\n\n  ::placeholder {\n    color: #ffffff;\n    font-size: 12px;\n    font-style: italic;\n    text-align: center;\n  }\n\n  &:hover,\n  &:focus {\n    background-color: transparent;\n    outline: none;\n    border: none;\n    border-bottom: 2px solid #ffffff;\n  }\n`;\nexport const AddContactBtn = styled.button`\n  /* padding: 5px; */\n  /* max-height: 25px; */\n  margin-left: 10px;\n  border-radius: 5px;\n  transition: all 250ms ease-out;\n  background: white;\n  border: none;\n  cursor: pointer;\n  color: black;\n\n  &:hover {\n    color: #ffffff;\n    background: #001a1e;\n    box-shadow: rgb(255, 254, 254) 0px 0px 2px 1px;\n  }\n`;\n\nexport const IconAdd = styled.svg`\n  /* width: 80px;\n  height: 80px; */\n`;\n","import { nanoid } from \"nanoid\";\nimport React, { useState } from \"react\";\n\nimport { addContact } from \"redux/contacts/operations\";\nimport { selectContacts } from \"redux/contacts/selectors\";\n\nimport PropTypes from \"prop-types\";\nimport { HiUserAdd } from \"react-icons/hi\";\nimport { NameLabel, AddContactBtn, Input, Form } from \"./Phonebook.styled\";\nimport { useDispatch, useSelector } from \"react-redux\";\n\nexport default function Phonebook() {\n  const [name, setName] = useState(\"\");\n  const [number, setNumber] = useState(\"\");\n\n  const nameInputId = nanoid();\n  const phoneNumberInputId = nanoid();\n\n  const contacts = useSelector(selectContacts);\n  const dispatch = useDispatch();\n\n  const handleChange = (event) => {\n    const { name, value } = event.currentTarget;\n\n    switch (name) {\n      case \"name\":\n        setName(value);\n        break;\n\n      case \"number\":\n        setNumber(value);\n        break;\n\n      default:\n        return;\n    }\n  };\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    const contact = {\n      name,\n      number,\n      // id: nanoid(),\n    };\n\n    const checkContact = contacts.some(\n      (contact) => contact.name.toLowerCase() === name.toLowerCase()\n    );\n    checkContact\n      ? alert(`${name} is already in contact`)\n      : dispatch(addContact(contact));\n\n    resetSubmit();\n  };\n\n  const resetSubmit = () => {\n    setName(\"\");\n    setNumber(\"\");\n  };\n  return (\n    <div>\n      <Form action=\"\" onSubmit={handleSubmit}>\n        <NameLabel htmlFor={nameInputId}>\n          Name:\n          <Input\n            type=\"text\"\n            name=\"name\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n            required\n            value={name}\n            onChange={handleChange}\n            id={nameInputId}\n            placeholder=\"Please write name\"\n          />\n        </NameLabel>\n        <NameLabel htmlFor={phoneNumberInputId}>\n          Number:\n          <Input\n            type=\"tel\"\n            name=\"number\"\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n            required\n            value={number}\n            onChange={handleChange}\n            id={phoneNumberInputId}\n            placeholder=\"Please write number\"\n          />\n        </NameLabel>\n        <AddContactBtn tupe=\"submit\">\n          <HiUserAdd size={16} />\n        </AddContactBtn>\n      </Form>\n    </div>\n  );\n}\n\nPhonebook.prototypes = {\n  name: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired,\n  onSubmit: PropTypes.func.isRequired,\n};\n","import styled from \"@emotion/styled\";\n\nexport const SearchInputSt = styled.input`\n  display: flex;\n  justify-content: center;\n  margin-left: auto;\n  margin-right: auto;\n\n  background-color: transparent;\n  border: none;\n  border-bottom: 1px solid #360032;\n  transition: border-bottom 300ms ease-in;\n  &:hover,\n  &:focus {\n    background-color: transparent;\n    outline: none;\n    border: none;\n    border-bottom: 2px solid #e9e9e9;\n  }\n\n  ::placeholder {\n    color: #ffffff;\n    font-size: 12px;\n    font-style: italic;\n    text-align: center;\n  }\n`;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { SearchInputSt } from \"./SearchInput.styled\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { selectFilter } from \"redux/contacts/selectors\";\nimport { setFilter } from \"redux/contacts/filterSlice\";\n\nexport default function SearchInput() {\n  const dispatch = useDispatch();\n  const filter = useSelector(selectFilter);\n\n  const onChange = (e) => {\n    dispatch(setFilter(e.target.value));\n  };\n\n  return (\n    <div>\n      {/* <p>Search contact</p> */}\n      <SearchInputSt\n        type=\"text\"\n        name={filter}\n        value={filter}\n        onChange={onChange}\n        placeholder=\"Please write name\"\n      />\n    </div>\n  );\n}\n\nSearchInput.propTypes = {\n  filter: PropTypes.string,\n  changeFilterInput: PropTypes.func,\n};\n","import styled from \"@emotion/styled\";\n\nexport const List = styled.ul`\n  /* https://www.8host.com/blog/stilizaciya-polosy-prokrutki-v-css/ */\n  ::-webkit-scrollbar {\n    width: 8px; /* ширина всей полосы прокрутки */\n  }\n\n  ::-webkit-scrollbar-track {\n    background: #e9e9e9; /* цвет зоны отслеживания */\n    border-radius: 20px;\n  }\n\n  ::-webkit-scrollbar-thumb {\n    background-color: #1d92a4; /* цвет бегунка */\n    border-radius: 20px; /* округлось бегунка */\n    border: 1px solid #000000b9; //отступ вокруг бегунка\n  }\nmax-height: 400px;\n  transition: all 300ms ease-out;\n  overflow-y: auto;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-right: 3px;\n\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  margin-top: 15px;\n\n  border-radius: 5px;\n`;\n\nexport const Item = styled.li`\n  opacity: 1;\n  transition: opacity 500ms ease-out;\n  width: 360px;\n  display: flex;\n  align-items: center;\n  align-content: center;\n  padding: 10px 0;\n  margin: 5px 0;\n  border-radius: 5px;\n  background-color: #e9e9e9;\n\n  box-shadow: rgb(0, 0, 0) 0px 1px 5px;\n  transition: all 250ms ease-out;\n\n  &:hover {\n    background: #1d92a4;\n    scale: 1.03;\n    color: white;\n    box-shadow: rgba(0, 0, 0, 0.885) 0px 7px 10px;\n  }\n  &:hover img {\n    box-shadow: rgba(255, 255, 255, 0.9) 0px 0px 10px;\n  }\n\n  :hover button {\n    opacity: 1;\n    transform: scale(1);\n\n    color: black;\n    background: white;\n    box-shadow: rgb(255, 254, 254) 0px 0px 3px;\n  }\n`;\nexport const Avatar = styled.img`\n  margin-left: 10px;\n  width: 40px;\n  height: 40px;\n  border-radius: 50px;\n  transition: all 250ms ease-out;\n`;\n\nexport const UserInfo = styled.p`\n  margin-left: 15px;\n`;\n\nexport const DeleteBtn = styled.button`\n  opacity: 0;\n  transform: scale(0.8);\n  padding-top: 2px;\n  max-height: 25px;\n  margin-left: auto;\n  margin-right: 15px;\n  border-radius: 5px;\n  cursor: pointer;\n  background: transparent;\n  border: none;\n  transition: all 400ms ease-out;\n\n  &:hover {\n  }\n`;\n","import { motion } from 'framer-motion';\nimport PropTypes from 'prop-types';\n\nimport React from 'react';\nimport { DeleteBtn, List, Item, UserInfo, Avatar } from './ContactLIst.styled';\nimport { HiOutlineTrash } from 'react-icons/hi';\n\nimport { useDispatch, useSelector } from 'react-redux';\nimport { deleteContact } from 'redux/contacts/operations';\nimport { selectFilteredContacts } from 'redux/contacts/selectors';\n\nexport default function ContactList() {\n  const contacts = useSelector(selectFilteredContacts);\n  const dispatch = useDispatch();\n\n  const listVAriatns = {\n    visible: i => ({\n      opacity: 1,\n      y: 0,\n      transition: {\n        delay: i * 0.1,\n      },\n    }),\n    hidden: { opacity: 0, y: -100 },\n  };\n\n  return (\n    <>\n      <List>\n        {contacts.map(({ id, name, number, avatar }, i) => {\n          return (\n            <motion.div\n              key={id}\n              variants={listVAriatns}\n              initial=\"hidden\"\n              animate=\"visible\"\n              custom={i}\n            >\n              <Item>\n                <Avatar\n                  src={\n                    avatar\n                      ? avatar\n                      : 'https://cdn-icons-png.flaticon.com/512/2922/2922506.png'\n                  }\n                  alt=\"avatar\"\n                />\n                <UserInfo>\n                  {name}: {number}\n                </UserInfo>\n                <DeleteBtn\n                  type=\"button\"\n                  onClick={() => dispatch(deleteContact(id))}\n                >\n                  <HiOutlineTrash size={20} />\n                </DeleteBtn>\n              </Item>\n            </motion.div>\n          );\n        })}\n      </List>\n    </>\n  );\n}\n\nContactList.propTypes = {\n  contacts: PropTypes.arrayOf(\n    PropTypes.exact({\n      name: PropTypes.string.isRequired,\n      number: PropTypes.string.isRequired,\n      id: PropTypes.string.isRequired,\n    })\n  ),\n  deleteContact: PropTypes.func,\n};\n","import React from \"react\";\nimport ContentLoader from \"react-content-loader\";\n\nconst SkeletonItem = (props) => (\n  <ContentLoader\n    speed={1}\n    width={371}\n    height={450}\n    viewBox=\"0 0 383 450\"\n    backgroundColor=\"#00576f\"\n    foregroundColor=\"#3e7386\"\n    // backgroundOpacity={0.06}\n    // foregroundOpacity={0.12}\n    {...props}\n  >\n    <rect x=\"12\" y=\"13\" rx=\"5\" ry=\"5\" width=\"371\" height=\"62\" />\n    <rect x=\"12\" y=\"86\" rx=\"5\" ry=\"5\" width=\"371\" height=\"62\" />\n    <rect x=\"12\" y=\"158\" rx=\"5\" ry=\"5\" width=\"371\" height=\"62\" />\n    <rect x=\"12\" y=\"230\" rx=\"5\" ry=\"5\" width=\"371\" height=\"62\" />\n    <rect x=\"12\" y=\"302\" rx=\"5\" ry=\"5\" width=\"371\" height=\"62\" />\n    <rect x=\"12\" y=\"374\" rx=\"5\" ry=\"5\" width=\"371\" height=\"62\" />\n  </ContentLoader>\n);\n\nexport default SkeletonItem;\n","import { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { fetchContacts } from \"redux/contacts/operations\";\nimport { selectIsLoading } from \"redux/contacts/selectors\";\n\nimport Phonebook from \"components/Phonebook/Phonebook\";\nimport SearchInput from \"components/SearchInput/SearchInput\";\nimport ContactList from \"components/ContactList/ContactList\";\nimport SkeletonItem from \"components/Skeleton/SkeletonItem\";\nexport default function Contacts() {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectIsLoading);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <div>\n        <title>Your contacts</title>\n\n        <Phonebook />\n        <SearchInput />\n        {isLoading ? <SkeletonItem /> : <ContactList />}\n    </div>\n  );\n}\n"],"names":["selectContacts","state","contacts","items","selectIsLoading","isLoading","selectFilter","filter","selectFilteredContacts","createSelector","name","toLowerCase","includes","Form","styled","NameLabel","Input","AddContactBtn","Phonebook","useState","setName","number","setNumber","nameInputId","nanoid","phoneNumberInputId","useSelector","dispatch","useDispatch","handleChange","event","currentTarget","value","resetSubmit","action","onSubmit","preventDefault","contact","checkContact","some","alert","addContact","htmlFor","type","pattern","title","required","onChange","id","placeholder","tupe","size","prototypes","PropTypes","SearchInputSt","SearchInput","e","setFilter","target","List","Item","Avatar","UserInfo","DeleteBtn","ContactList","listVAriatns","visible","i","opacity","y","transition","delay","hidden","map","avatar","motion","variants","initial","animate","custom","src","alt","onClick","deleteContact","props","speed","width","height","viewBox","backgroundColor","foregroundColor","x","rx","ry","Contacts","useEffect","fetchContacts"],"sourceRoot":""}